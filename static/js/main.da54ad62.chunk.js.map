{"version":3,"sources":["components/NextEvent.tsx","components/TableMedals.tsx","view/JOPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["NextEvent","dataNextEvent","useState","sportList","setSportList","selectedSports","setSelectedSports","index","setIndex","useEffect","filteredList","useMemo","filter","item","includes","sportTitle","_","idx","length","i","filteredOptions","map","sport","label","sportId","value","key","id","option","placeholder","mode","showSearch","size","onChange","style","width","marginTop","marginBottom","Option","Title","level","className","description","gutter","align","wrap","justify","shape","icon","LeftOutlined","onClick","disabled","pictureUrl","date","span","cover","alt","src","height","objectFit","preview","Meta","title","moment","format","RightOutlined","TableMedals","newDataMedals","medals","medal","total","Object","values","reduce","result","el","columns","Text","strong","dataIndex","render","country","gold","sorter","a","b","silver","bronze","defaultSortOrder","pagination","dataSource","JOPage","data","nextEvent","Header","Layout","Content","Footer","App","background","display","justifyContent","fontSize","fontWeight","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.da54ad62.chunk.js","sourcesContent":["import moment from 'moment'\nimport { NextEventType } from '../common_types/types'\nimport React, { useEffect, useMemo, useState } from 'react'\nimport { Card, Empty, Typography, Image, Select, Row, Col, Button } from 'antd'\nimport { LeftOutlined, RightOutlined } from '@ant-design/icons'\n\nimport '../index.css'\n\ntype NextEventList = {\n  dataNextEvent: NextEventType[]\n}\nconst COUNT_SLIDES = 3\n\nconst NextEvent = ({ dataNextEvent }: NextEventList) => {\n  const [sportList, setSportList] = useState<NextEventType[]>([])\n  const [selectedSports, setSelectedSports] = useState<string[]>([\n    'Aviron - Double',\n    'Aviron - Solo',\n    'Cyclisme sur route',\n    'Badminton - Simple homme',\n    'Badminton - double femme',\n  ])\n  const [index, setIndex] = useState<number>(0)\n\n  // Add default value on page load\n  useEffect(() => {\n    setSportList(dataNextEvent)\n  }, [dataNextEvent])\n\n  // Avoid duplicate function calls with useMemo.\n  const filteredList = useMemo(() => {\n    // Avoid filter when selectedSports is null\n    if (!selectedSports) {\n      return sportList\n    }\n    return sportList\n      .filter((item) => selectedSports.includes(item.sportTitle))\n      .filter((_, idx) => idx >= index && idx < index + COUNT_SLIDES)\n  }, [selectedSports, sportList, index])\n\n  useEffect(() => {\n    if (filteredList.length > 0 && filteredList.length <= COUNT_SLIDES && index > 0) {\n      setIndex((i) => i - COUNT_SLIDES)\n    }\n  }, [filteredList])\n  // Options for select\n  const OPTIONS = sportList.map((sport) => ({\n    label: sport.sportId,\n    value: sport.sportTitle,\n    key: sport.id,\n  }))\n\n  const filteredOptions = OPTIONS.filter((option) => !selectedSports.includes(option.value))\n\n  // Control btns\n  const handleRight = () => {\n    if (index + COUNT_SLIDES < sportList.length) {\n      setIndex(index + COUNT_SLIDES)\n    }\n  }\n\n  const handleLeft = () => {\n    if (index - COUNT_SLIDES >= 0) {\n      setIndex(index - COUNT_SLIDES)\n    }\n  }\n\n  return (\n    <>\n      <Select\n        placeholder=\"Sélectionnez des sports\"\n        mode=\"multiple\"\n        showSearch={false}\n        size=\"large\"\n        value={selectedSports}\n        onChange={setSelectedSports}\n        style={{ width: '100%', marginTop: 20, marginBottom: 20 }}\n      >\n        {filteredOptions.map((sport) => {\n          const { key, value, label } = sport\n          return (\n            <Select.Option key={key} value={value} label={label} style={{ width: '100%' }}>\n              {value}\n            </Select.Option>\n          )\n        })}\n      </Select>\n\n      <Typography.Title level={4} className={'title'}>\n        Prochaines épreuves\n      </Typography.Title>\n\n      {filteredList && filteredList.length === 0 ? (\n        <Empty description={`Aucune épreuve de prévu`} />\n      ) : (\n        <Row\n          gutter={8}\n          align=\"middle\"\n          wrap={false}\n          justify=\"center\"\n          style={{ marginTop: 40, marginBottom: 50 }}\n        >\n          <Button\n            shape=\"circle\"\n            icon={<LeftOutlined />}\n            size=\"middle\"\n            onClick={handleLeft}\n            className=\"arrows next\"\n            disabled={index - COUNT_SLIDES < 0}\n          />\n          {filteredList.map((sport) => {\n            const { sportId, id, sportTitle, pictureUrl, date } = sport\n            return (\n              <Col span={7} key={sportId}>\n                <Card\n                  key={id}\n                  cover={\n                    <Image\n                      alt={sportTitle}\n                      src={pictureUrl}\n                      height={180}\n                      width=\"100%\"\n                      style={{ objectFit: 'cover' }}\n                      preview={false}\n                    />\n                  }\n                >\n                  <Card.Meta\n                    title={sportTitle}\n                    description={moment(+date * 1000).format('DD/MM/YYYY - HH:mm')}\n                  />\n                </Card>\n              </Col>\n            )\n          })}\n          <Button\n            shape=\"circle\"\n            icon={<RightOutlined />}\n            size=\"middle\"\n            onClick={handleRight}\n            disabled={index + COUNT_SLIDES >= filteredList.length}\n            className=\"arrows prev\"\n          />\n        </Row>\n      )}\n    </>\n  )\n}\n\nexport default NextEvent\n","import { Typography } from 'antd'\nimport Table, { ColumnsType } from 'antd/lib/table'\nimport React from 'react'\nimport { MedalType, TotalType } from '../common_types/types'\n\ntype TableMedalsType = {\n  medals: MedalType[]\n}\n\nconst TableMedals = ({ medals }: TableMedalsType) => {\n  // Create a new date with the addition of the property total\n  const newDataMedals = medals.map((medal) => ({\n    ...medal,\n    total: Object.values(medal.medals).reduce((result, el) => el + result, 0),\n  }))\n\n  const columns: ColumnsType<MedalType & TotalType> = [\n    {\n      title: <Typography.Text strong>Pays</Typography.Text>,\n      dataIndex: 'country',\n      key: 'country',\n      render: (country) => <Typography.Text>{country}</Typography.Text>,\n    },\n\n    {\n      title: <Typography.Text strong>Or</Typography.Text>,\n      dataIndex: 'medals',\n      key: 'gold',\n      render: (medals) => <Typography.Text>{medals.gold}</Typography.Text>,\n      sorter: (a, b) => a.medals.gold - b.medals.gold,\n    },\n    {\n      title: <Typography.Text strong>Argent</Typography.Text>,\n      dataIndex: 'medals',\n      key: 'silver',\n      render: (medals) => <Typography.Text>{medals.silver}</Typography.Text>,\n      sorter: (a, b) => a.medals.silver - b.medals.silver,\n    },\n    {\n      title: <Typography.Text strong>Bronze</Typography.Text>,\n      dataIndex: 'medals',\n      key: 'bronze',\n      render: (medals) => <Typography.Text>{medals.bronze}</Typography.Text>,\n      sorter: (a, b) => a.medals.bronze - b.medals.bronze,\n    },\n    {\n      title: <Typography.Text strong>Total</Typography.Text>,\n      dataIndex: 'total',\n      key: 'total',\n      render: (total) => <Typography.Text>{total}</Typography.Text>,\n      sorter: (a, b) => a.total - b.total,\n      defaultSortOrder: 'descend',\n    },\n  ]\n  return (\n    <>\n      {' '}\n      <Typography.Title\n        level={4}\n        // style={{ paddingTop: 20, paddingBottom: 20, fontSize: 23.5 }}\n        className=\"medalTitle\"\n      >\n        Médailles\n      </Typography.Title>\n      <Table pagination={false} columns={columns} dataSource={newDataMedals} />\n    </>\n  )\n}\n\nexport default TableMedals\n","import data from '../data.json'\nimport React from 'react'\nimport { Divider, Row, Col } from 'antd'\nimport '../index.css'\nimport NextEvent from '../components/NextEvent'\nimport TableMedals from '../components/TableMedals'\n\nconst JOPage = () => {\n  return (\n    <Row justify=\"center\">\n      <Col span={18}>\n        {' '}\n        <NextEvent dataNextEvent={data.nextEvent} />\n        <Divider />\n      </Col>\n\n      <Col span={18}>\n        <TableMedals medals={data.medals} />\n      </Col>\n    </Row>\n  )\n}\n\nexport default JOPage\n","import JOPage from './view/JOPage'\nimport React from 'react'\nimport { Layout } from 'antd'\n\nconst { Header, Content, Footer } = Layout\n\nconst App = () => {\n  return (\n    <Layout>\n      <Header\n        style={{\n          background: '#d9d9d9',\n          display: 'flex',\n          justifyContent: 'center',\n          fontSize: 24,\n          fontWeight: 600,\n        }}\n      >\n        JO 2020\n      </Header>\n      <Content>\n        <JOPage />\n      </Content>\n      <Footer />\n    </Layout>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import App from './App'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport reportWebVitals from './reportWebVitals'\nimport './index.css'\nimport 'antd/dist/antd.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}